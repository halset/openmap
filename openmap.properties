# **********************************************************************
# 
#  BBNT Solutions LLC, A part of GTE
#  10 Moulton St.
#  Cambridge, MA 02138
#  (617) 873-2000
# 
#  Copyright (C) 1998, 2000, 2001
#  This software is subject to copyright protection under the laws of 
#  the United States and other countries.
# 
# **********************************************************************
# 
# $Source: /cvs/distapps/openmap/openmap.properties,v $
# $Revision: 1.1 $
# $Date: 2001/06/15 03:09:31 $
# $Author: dietrick $
# 
# **********************************************************************
#
# WHAT IS THIS FILE?
#
# This is a generic OpenMap properties file, which controls how
# components are loaded into the OpenMap application.  It specifies
# the initial projection the map should have when OpenMap is started,
# the layers that should be available, which ones should be turned on,
# and lets you adjust all the layers' attributes for their startup
# configuration.  Most importantly, this file also lets you add and
# remove different components from the application itself.  You can
# modify it with any text editor you like.
#
# WHAT ARE PROPERTIES?
# 
# Java properties are a set of key=value pairs.  The key is the name
# of the thing you are setting, and the value is what you are setting
# it to.  There are a couple of things to look for that we do with key
# values in this properties file.
#
# First, all the properties that can be set for a component are
# *hopefully* listed in the Javadocs (Java API documentation).  If a
# component is specified as a com.bbn.openmap.PropertyConsumer, it
# will be given a change to configure itself based on the settings
# within the properties file.  Components can be layers or any other
# part of the OpenMap application.
#
# Secondly, the keys are scoped to focus the value to a specific
# instance of a components.  If there are more that one layer of a
# specific type (say, two ShapeLayers, one for roads and one for
# rivers), the names of they keys will have a different prefix for the
# key.  For instance, ShapeLayers have a lineColor attribute you can
# set in this file, and the value used is a hexidecimal value for an
# ARGB color (transparency (A), red (R), green (G), blue (B)):
# 
# For a red, non-transparent color for the line.
# lineColor=FFFF0000
# 
# But there are two layers - to scope the property for different
# layers, a prefix must be added to the property, separated by a '.':
#
# roads.lineColor=FFFF0000
# rivers.lineColor=FF0000FF
#
# In this case, the roads layer has a red line color and the rivers
# layer has a blue line color.  The prefix 'roads' and 'rivers' is
# something picked to your liking and used only within this property
# file, and is referred to in OpenMap documentation as a marker name.
# Marker names are first used in a list - the openmap.layers property
# is a perfect example:
#
# openmap.layers=first second third
#
# In this example, I've chosen first, second and third to be marker
# names of three different layers.  Later in the properties file, I
# would use these marker names to define the layers and each layer's
# attributes.  For the 'first' layer, I'll define a ShapeLayer:
#
# # All layers require a class name that defines which one to use
# first.class=com.bbn.openmap.layer.shape.ShapeLayer
#
# # And a pretty name to use in the GUI
# first.prettyName=Roads
#
# # Now come properties that are particular to ShapeLayers:
#
# # These first two are mandatory for the ShapeLayer:
# first.shapeFile=<path to shape file (.shp)>
# first.spatialIndex=<path to spatial index file (.ssx)>
#
# # These are optional, and override the defaults set in the ShapeLayer:
# first.lineColor=FFFF0000
# first.lineWidth=2
#
# You do this for each layer listed.  To add a layer to the
# application, you make up a marker name, add it to the list, and then
# define a set of properties for it using the marker name as a prefix.
#

# This marker name list paradigm is used throughout the properties
# file.  It's an important concept to understand before modifying this
# file.
#
# HOW MANY PROPERTIES FILES ARE THERE?
#
# OpenMap looks for this file in several different places.  When it
# finds one, it loads all the properties, and moves on.  If two
# properties have the same key, the last version read wins.  The most
# important place to keep a version of the openmap.properties file is
# a personalized one in your home directory or profile directory.
# This is the last one read.  It also lets you personalize your
# application setup and not affect anyone else using the OpenMap
# installation.
#
# OK, lets define the map!
#
# ###################################################
# These properties define the starting projection of the map.  
# These properties are listed in com.bbn.openmap.Environment.java,
# and affect the initialization of the application.
# ###################################################

openmap.Latitude=41.5f
openmap.Longitude=-71f
# Scale: zoom level (1:scale)
openmap.Scale=10000000f
# Mercator projection (try "cadrg", "orthographic", ...)
openmap.Projection=mercator
# Width and Height of map
openmap.Width=640
openmap.Height=480
# X/Y window position (if values < 0, then center window on screen)
openmap.x=-1
openmap.y=-1
openmap.BackgroundColor=FF89C5F9

# ###################################################
# These are miscellaneous variables for the OpenMap application.
# ###################################################
# How to lauch a browser to display additional information.
openmap.WebBrowser=/usr/bin/netscape -install
# Used for creating web pages for the browser
openmap.TempDirectory=/tmp
# Help web pages
openmap.HelpURL=http://openmap.bbn.com/doc/user-guide.html
# Use internal frames as an application
gui.UseInternalFrames=false

# ###################################################
# These properties define the general components to use in the
# application, OTHER than layers.  Notice the marker name list.  You
# can add and removed parts of the application here, simply by
# adjusting this marker name list and adding properties for that
# marker name.  Note the order in which menu objects are important,
# except helpMenu which is always adjusted to be the last menu item
# ###################################################

openmap.components=frame omdrawingtool toolBar omToolSet layersPanel overviewMapHandler layerHandler  mouseModePanel informationDelegator mouseDelegator navMouseMode selectMouseMode distanceMouseMode nullMouseMode menuBar fileMenu helpMenu controlMenu navigateMenu layersMenu helpUserMenuItem omlineloader projectionstack projectionstacktool omcircleloader omrectloader ompointloader

frame.class=com.bbn.openmap.gui.OpenMapFrame
layerHandler.class=com.bbn.openmap.LayerHandler
toolBar.class=com.bbn.openmap.gui.ToolPanel
omToolSet.class=com.bbn.openmap.gui.OMToolSet
layersPanel.class=com.bbn.openmap.gui.LayersPanel
overviewMapHandler.class=com.bbn.openmap.gui.OverviewMapHandler
layersMenu.class=com.bbn.openmap.gui.LayersMenu
menuPanel.class=com.bbn.openmap.gui.MenuPanel
mouseModePanel.class=com.bbn.openmap.gui.MouseModePanel
informationDelegator.class=com.bbn.openmap.InformationDelegator
mouseDelegator.class=com.bbn.openmap.MouseDelegator
navMouseMode.class=com.bbn.openmap.event.NavMouseMode2
selectMouseMode.class=com.bbn.openmap.event.SelectMouseMode
distanceMouseMode.class=com.bbn.openmap.event.DistanceMouseMode
nullMouseMode.class=com.bbn.openmap.event.NullMouseMode
menuBar.class=com.bbn.openmap.gui.MenuBar
fileMenu.class=com.bbn.openmap.gui.FileMenu
helpMenu.class=com.bbn.openmap.gui.DefaultHelpMenu
controlMenu.class=com.bbn.openmap.gui.ControlMenu
navigateMenu.class=com.bbn.openmap.gui.NavigateMenu
helpUserMenuItem.class=com.bbn.openmap.gui.UserGuideMenuItems
omdrawingtool.class=com.bbn.openmap.tools.drawing.OMDrawingTool
omlineloader.class=com.bbn.openmap.tools.drawing.OMLineLoader
omcircleloader.class=com.bbn.openmap.tools.drawing.OMCircleLoader
omrectloader.class=com.bbn.openmap.tools.drawing.OMRectLoader
ompointloader.class=com.bbn.openmap.tools.drawing.OMPointLoader
projectionstack.class=com.bbn.openmap.proj.ProjectionStack
projectionstacktool.class=com.bbn.openmap.gui.ProjectionStackTool

# ###################################################
# Properties defined for the overview map handler.
# ###################################################

# marker name list, layer defined later
overviewLayers=overviewLayer
# how zoomed out to keep the overview map versus the main map
overviewScaleFactor=10f
# when to stop zooming in
overviewMinScale=10000000f
# the layer to use to render on top, showing where the main map covers.
overviewStatusLayer=com.bbn.openmap.layer.OverviewMapAreaLayer

# ###################################################
# You can refer to other properties files and have their properties
# loaded as well.  This is good for defining a set of layers that work
# with a particular type of data, for instance, and then override some
# of those properties defined in those files to localize them for your
# setup.  This works with a marker name list.  By default, nothing defined.
# ###################################################

#openmap.includes=include1 include2
#include1.URL=<http://whatever>
#include2.URL=<http://whatever>

# ###################################################
# Here is the list of layers to add to the map.  The properties for
# each marker name are defined later.
# ###################################################

# Layers listed here appear on the Map in the order of their names.
openmap.layers=date quake daynight test graticule demo jdted jrpf shapePolitical

#openmap.layers=date quake daynight test graticule demo dtedcov jdted jrpf shapePolitical ScaledPolitical ScaledFillPolitical

# These layers are turned on when the map is first started.
openmap.startUpLayers=graticule shapePolitical

# ###################################################
# These are the properties for individual layers.  Consult the 
# javadocs (Java API pages) for the individual layers for options.
# ###################################################

### Layer used by the overview handler
overviewLayer.class=com.bbn.openmap.layer.shape.ShapeLayer
overviewLayer.prettyName=Overview
overviewLayer.shapeFile=data/shape/dcwpo-browse.shp
overviewLayer.spatialIndex=data/shape/dcwpo-browse.ssx
overviewLayer.lineColor=ff000000
overviewLayer.fillColor=ffbdde83

### Demo layer - the layer's palette has a bunch of buttons to call the Drawing Tool.
demo.class=com.bbn.openmap.layer.DemoLayer
demo.prettyName="Drawing Tool"

### ShapeFile layers
shapePolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
shapePolitical.prettyName=Political Boundaries
# Specify shapefile and spatial-index file as a filename or pathname.
# If the former, you must reference the directory where this file
# lives in your CLASSPATH
shapePolitical.shapeFile=data/shape/dcwpo-browse.shp
shapePolitical.spatialIndex=data/shape/dcwpo-browse.ssx
# Colors (32bit ARGB)
shapePolitical.lineColor=ff000000
shapePolitical.fillColor=ffbdde83

# ScaleFilterLayer switches between the layers at the transisition scales.
ScaledPolitical.class=com.bbn.openmap.layer.ScaleFilterLayer
ScaledPolitical.prettyName=Political Boundaries
# List 2 or more layers
ScaledPolitical.layers=ThinShapePolitical ShapePolitical
# List the transition scales to switch between layers
ScaledPolitical.transitionScales=5000000

# ScaleFilterLayer switches between the layers at the transisition scales.
ScaledFillPolitical.class=com.bbn.openmap.layer.ScaleFilterLayer
ScaledFillPolitical.prettyName=Political Areas
# List 2 or more layers
ScaledFillPolitical.layers=ThinShapeFillPolitical ShapeFillPolitical
# List the transition scales to switch between layers
ScaledFillPolitical.transitionScales=5000000

### ShapeFile layer, full resolution converted vmap political boundaries
ShapePolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
ShapePolitical.prettyName=Political Edge
ShapePolitical.shapeFile=data/shape/vmap_edge.shp
ShapePolitical.spatialIndex=data/shape/vmap_edge.ssx

### ShapeFile layer, thinned converted vmap political boundaries
ThinShapePolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
ThinShapePolitical.prettyName=Political Edge
ThinShapePolitical.shapeFile=data/shape/vmap_edge_thin.shp
ThinShapePolitical.spatialIndex=data/shape/vmap_edge_thin.ssx

### ShapeFile layer, full resolution converted vmap political areas
ShapeFillPolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
ShapeFillPolitical.prettyName=Political Solid
ShapeFillPolitical.shapeFile=data/shape/vmap_area.shp
ShapeFillPolitical.spatialIndex=data/shape/vmap_area.ssx
ShapeFillPolitical.lineColor=BDDE83
ShapeFillPolitical.fillColor=BDDE83

### ShapeFile layer, thinned converted vmap political areas
ThinShapeFillPolitical.class=com.bbn.openmap.layer.shape.ShapeLayer
ThinShapeFillPolitical.prettyName=Political Solid
ThinShapeFillPolitical.shapeFile=data/shape/vmap_area_thin.shp
ThinShapeFillPolitical.spatialIndex=data/shape/vmap_area_thin.ssx
ThinShapeFillPolitical.lineColor=BDDE83
ThinShapeFillPolitical.fillColor=BDDE83

### Graticule layer
graticule.class=com.bbn.openmap.layer.GraticuleLayer
graticule.prettyName=Graticule
# Show lat / lon spacing labels
graticule.showRuler=true
graticule.show1And5Lines=true
# Controls when the five degree lines and one degree lines kick in
#- when there is less than the threshold of ten degree lat or lon
#lines, five degree lines are drawn.  The same relationship is there
#for one to five degree lines.
graticule.threshold=2
# the color of 10 degree spaing lines (ARGB)
graticule.10DegreeColor=99000000
# the color of 5 degree spaing lines (ARGB)
graticule.5DegreeColor=99009900
# the color of 1 degree spaing lines (ARGB)
graticule.1DegreeColor=99003300
# the color of the equator (ARGB)
graticule.equatorColor=99FF0000
# the color of the international dateline (ARGB)
graticule.dateLineColor=99000000
# the color of the special lines (ARGB)
graticule.specialLineColor=99000000
# the color of the labels (ARGB)
graticule.textColor=99000000


### Date & Time layer
date.class=com.bbn.openmap.layer.DateLayer
date.prettyName=Date & Time
# display font as a Java font string
date.font=SansSerif-Bold
# like XWindows geometry: [+-]X[+-]Y, `+' indicates relative to
# left edge or top edges, `-' indicates relative to right or bottom
# edges, XX is x coordinate, YY is y coordinate
date.geometry=+20+30
# background rectangle color ARGB
date.color.bg=ff808080
# foreground text color ARGB
date.color.fg=ff000000
# date format (using java.text.SimpleDateFormat patterns)
date.format=EEE, d MMM yyyy HH:mm:ss z


### Day/Night shading layer properties
daynight.class=com.bbn.openmap.layer.daynight.DayNightLayer
daynight.prettyName=Day/Night Shading
# draw terminator as poly (faster calculation than image, defaults to
# true).
daynight.doPolyTerminator=true
# number of vertices for polygon terminator line.  this is only valid
# if doPolyTerminator is true...
daynight.terminatorVerts=512
# termFade - the distance of the transition of fade, as a percentage of PI.
daynight.termFade=.1
# currentTime - true to display the shading at the computer's current time.
daynight.currentTime=true
# updateInterval - time in milliseconds between updates.  currentTime has to be
# true for this to be used.  1000*60*5 = 300000 = 5min updates
daynight.updateInterval=300000
# Shading Colors (32bit ARGB)
daynight.nighttimeColor=64000000
daynight.daytimeColor=00FFFFFF


### Earthquake layer
quake.class=com.bbn.openmap.layer.EarthquakeLayer
quake.prettyName=Recent Earthquakes


### Test layer
test.prettyName=Test
test.class=com.bbn.openmap.layer.test.TestLayer
test.line.visible=true
test.circ.visible=true
test.rect.visible=true
test.text.visible=true
test.poly.visible=true
#test.poly.vertices=80 -180 80 -90 80 0 80 90 80 180 70 180 70 90 70 0 70 -90 70 -180


###CSV Location layer
locationlayer.class=com.bbn.openmap.layer.location.LocationLayer
locationlayer.prettyName=Emitter Display

locationlayer.locationHandlers=csvlocationhandler

csvlocationhandler.class=com.bbn.openmap.layer.location.csv.CSVLocationHandler
csvlocationhandler.locationFile=
csvlocationhandler.locationColor=FF0000
csvlocationhandler.nameColor=008C54
csvlocationhandler.showNames=True
csvlocationhandler.showLocations=true
csvlocationhandler.latIndex=0
csvlocationhandler.lonIndex=1
csvlocationhandler.nameIndex=2

### VMAP Political layer
vmapPolitical.class=com.bbn.openmap.layer.vpf.VPFLayer
vmapPolitical.prettyName=VMAP Political
vmapPolitical.vpfPath=data/vmap/vmaplv0
vmapPolitical.coverageType=bnd
vmapPolitical.featureTypes=edge area text
#  just display coastlines and political boundaries
#vmapPolitical.edge= polbndl coastl depthl
vmapPolitical.edge= polbndl coastl
#  just display political areas and not oceans
#vmapPolitical.area= oceansea polbnda
vmapPolitical.area= polbnda


### VMAP Coastline layer
vmapCoast.class=com.bbn.openmap.layer.vpf.VPFLayer
vmapCoast.prettyName=VMAP Coastline Layer
vmapCoast.vpfPath=data/vmap/vmaplv0
## a predefined layer from the VPF predefined layer set found in
## com/bbn/openmap/layer/vpf/defaultVPFLayers.properties
vmapCoast.defaultLayer=vmapCoastline

# Basic political boundaries with DCW
dcwPolitical.class=com.bbn.openmap.leyer.vpf.VPFLayer
dcwPolitical.prettyName=DCW Political Boundaries
dcwPolitical.vpfPath=path to DCW data
dcwPolitical.coverageType=po
dcwPolitical.featureTypes=edge area


### Java RPF properties
jrpf.class=com.bbn.openmap.layer.rpf.RpfLayer
jrpf.prettyName=CADRG
# This property should reflect the paths to the RPF directories
jrpf.paths=data/RPF
# Number between 0-255: 0 is transparent, 255 is opaque
jrpf.opaque=255
# Number of colors to use on the maps - 16, 32, 216
jrpf.number.colors=216
# Display maps on startup
jrpf.showmaps=true
# Display attribute information on startup
jrpf.showinfo=false
# Scale images to fit the map scale
jrpf.scaleImages=true
jrpf.coverage=true

### Another Java RPF Layer - usually keep CADRG and CIB separate,
# although you don't have to.
jcib.class=com.bbn.openmap.layer.rpf.RpfLayer
jcib.prettyName=CIB
# This property should reflect the paths to the RPF directories
jcib.paths=data/CIB/RPF
# Number between 0-255: 0 is transparent, 255 is opaque
jcib.opaque=255
# Number of colors to use on the maps - 16, 32, 216
jcib.number.colors=216
# Display maps on startup
jcib.showmaps=true
# Display attribute information on startup
jcib.showinfo=false
# Scale images to fit the map scale
jcib.scaleImages=true


### Java DTED Coverage properties
dtedcov.class=com.bbn.openmap.layer.dted.DTEDCoverageLayer
dtedcov.prettyName=DTED Coverage
# This property should reflect the paths to the DTED level 0 and 1 
# directories.  These levels can be combined.
dtedcov.paths=data/dted
# DTED Level 2 data!
dtedcov.level2.paths=data/dted2 
# Number between 0-255: 0 is transparent, 255 is opaque
dtedcov.opaque=255
dtedcov.coverageFile=data/dted/coverage.dat
# You can substitute a URL for the coverage file instead...
#dtedcov.coverageURL=http://openmap.bbn.com/dtedCoverage.dat


### Java DTED properties
jdted.class=com.bbn.openmap.layer.dted.DTEDLayer
jdted.prettyName=DTED
# This property should reflect the paths to the DTED level 0 and 1 
# directories.  These levels can be combined.
jdted.paths=data/dted
# DTED Level 2 data!
jdted.level2.paths=data/dted2
# Number between 0-255: 0 is transparent, 255 is opaque
jdted.opaque=255
# Number of colors to use on the maps - 16, 32, 216
jdted.number.colors=216
# Level of DTED data to use on startup (0, 1, 2)
jdted.level=0
# Type of display for the data on startup
# 0 = no shading at all
# 1 = greyscale slope shading
# 2 = band shading, in meters
# 3 = band shading, in feet
# 4 = subframe testing
# 5 = elevation, colored
jdted.view.type=5
# Contrast setting on startup, 1-5
jdted.contrast=3
# height (meters or feet) between color changes in band shading on startup
jdted.band.height=25
# Minumum scale to display images. Larger numbers mean smaller scale, 
# and are more zoomed out.
jdted.min.scale=20000000

# Terrain layer.
terrain.class=com.bbn.openmap.layer.terrain.TerrainLayer
terrain.prettyName=Terrain Tools
# This property should reflect the paths to the DTED directories
terrain.dted.paths=data/dted
# The default tool to use for the terrain layer.  Can be PROFILE or LOS.
terrain.default.mode=PROFILE
