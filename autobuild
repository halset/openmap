#!/bin/sh
# **********************************************************************
# 
#    Use, duplication, or disclosure by the Government is subject to
# 	     restricted rights as set forth in the DFARS.
#  
# 			   BBN Technologies
# 			    A Division of
# 			   BBN Corporation
# 			  10 Moulton Street
# 			 Cambridge, MA 02138
# 			    (617) 873-3000
#  
# 	  Copyright 1998 by BBN Technologies, A Division of
# 		BBN Corporation, all rights reserved.
#  
# **********************************************************************
# 
# $Source: /cvs/distapps/openmap/Attic/autobuild,v $
# $RCSfile: autobuild,v $
# $Revision: 1.35 $
# $Date: 1998/11/12 19:03:59 $
# $Author: tmitchel $
# 
# **********************************************************************
#
# This script will build the openmap package automatically.
#
# **********************************************************************


#----------------------------------------------------------------------
# Functions
#----------------------------------------------------------------------

# Show the usage for this script
#
showUsage () {
  echo "usage: $0 <args>"
  echo "Arguments:"
  echo "-d or --directory :	The build directory"
  echo "-t or --tag :		Build using a tagged version"
  echo "-v or --verbose :	Be vocal about things"
  echo "--no-export :		Don't remove/export sources (assume checked-out)"
  echo
  echo "ENVVARS:"
  echo "	CVSROOT"
  echo "	JDK"
  echo "	OpenMapClassPath"
  echo "	SwingClassPath"
  echo "	VbjClassPath"
  echo
}

# set the build date
setBuildDate() {
	EnvClass=$1
	buildDate=`/bin/date '+%Y%m%d@%H:%M'`
	echo "buildDate = $buildDate"
	/bin/cat $EnvClass | /bin/sed -e "s/\(\$\$BuildDate=\)/\1$buildDate/" > sed.out
	/bin/mv	sed.out $EnvClass
}


#----------------------------------------------------------------------
# Default variable settings.  Override via command line args
#----------------------------------------------------------------------

BuildDir=""
Verbose=/bin/false
BuildVersion="-Dnow"


#----------------------------------------------------------------------
# Command line argument parsing
#----------------------------------------------------------------------

# Parse command line arguments
# -d || -directory
# -v || -verbose
#

while [ "$1" != "" ] ; do

  case $1 in

    "-d" | "--directory" )

      BuildDir=$2;
      shift;;

    "-t" | "--tag" )

      BuildVersion="-r $2";
      shift;;

    "-v" | "--verbose" )

      Verbose=/bin/true
      ;;

    "--no-export" )

      NoRM=/bin/true
      ;;

  esac;
  shift;
done

if [ "$BuildDir" = "" ] ; then
  showUsage
  exit 1
fi

BuildRoot=`dirname $BuildDir`
BeanName=`basename $BuildDir`

if $Verbose; then
  echo "BuildDir = $BuildDir"
  echo "BuildRoot = $BuildRoot"
  echo "BeanName = $BeanName"
fi

echo ""
echo "OpenMap build started at `date`"

if $Verbose; then
  echo "building in $BuildRoot"
fi


#----------------------------------------------------------------------
# Set up the environment.  Some of these should be command line
# arguments.
#----------------------------------------------------------------------

# set CVSROOT if not set (assume we're on blatz)
if [ -z "${CVSROOT}" ] ; then
	CVSROOT=/u4/rcs
	export CVSROOT
fi

# set JDK path if not set
if [ -z "${JDK}" ] ; then
	JDK=/usr/local/blatz/jdk1.1.6
fi
JdkClassPath=$JDK/lib/classes.zip

# set openmap jar file(s) if not set
if [ -z "${OpenMapClassPath}" ] ; then
	MattClassDir=/usr/local/matt/openmap/common/lib
	OpenMapClassPath=$MattClassDir/cspec58.jar
fi

# set swing jar file(s) if not set
if [ -z "${SwingClassPath}" ] ; then
	SWING=/usr/local/blatz/swing-1.0.2
	SwingClassPath=$SWING/swing.jar
fi

# set vbj if not set
if [ -z "${VbjClassPath}" ] ; then
	VBJ=/usr/local/matt/VisiBroker3.2-java
	VbjClassPath=$VBJ/lib/vbjorb.jar
fi

# set up gif.jar
if [ -z "${GifJarFile}" ] ; then
	OpenmapLibDir=/usr/local/matt/openmap/common/lib
	GifJarFile=$OpenmapLibDir/gif.jar
fi


CLASSPATH=$OpenMapClassPath:$SwingClassPath:$GifJarFile:$JdkClassPath:$VbjClassPath
export CLASSPATH

PATH=/bin:/usr/bin:/usr/local/gnu/bin:$JDK/bin
export PATH

LayerPackages="com.bbn.openmap.layer.dted com.bbn.openmap.layer.nitf com.bbn.openmap.layer.plotLayer com.bbn.openmap.layer.pluginLayer com.bbn.openmap.layer.rpf com.bbn.openmap.layer.shape com.bbn.openmap.layer.specialist com.bbn.openmap.layer.util.cacheHandler com.bbn.openmap.layer.util.html com.bbn.openmap.layer.util.http com.bbn.openmap.layer.util.stateMachine com.bbn.openmap.layer.vpf"

CorePackages="com.bbn.openmap com.bbn.openmap.event com.bbn.openmap.examples com.bbn.openmap.gui com.bbn.openmap.omGraphics com.bbn.openmap.proj com.bbn.openmap.util"

AppPackages="com.bbn.openmap.app"

DocPackages="$CorePackages $LayerPackages $AppPackages"
export DocPackages

#echo $CLASSPATH

# set: -e = exit if a command exits with a non-zero exit status
# set: -v = Print shell input lines as they are read
# set: -x = Print commands and their  arguments  as  they  are executed.
if $Verbose; then
  set -evx
else
  set -e
fi

#
## Create a build directory
#
if [ ! "${NoRM}" ] ; then
	/bin/rm -rf $BuildDir
	/bin/mkdir -p $BuildDir
fi
cd $BuildDir

#
## Export the sources
#
if [ ! "${NoRM}" ] ; then
	cvs export $BuildVersion openmap
fi
cd openmap

#
## Now set the final CLASSPATH configuration with the full path to the sources
## directory
#
CLASSPATH=$CLASSPATH:`pwd`
export CLASSPATH

#
## set the builddate for the autobuild
#
setBuildDate com/bbn/openmap/Environment.java

#
## Configure the software
#
./configure

#
## Build the software
#
#gmake all
make

#
## Create the bean jar file
#
## Created by the makefile as of 11-Nov-1998.  -tom
#jar cvfm0 ../openmap.jar com/bbn/openmap/Manifest.txt `find com \( -name *.class -o -name *.gif \) -print`


#
## Add javadoc documentation
#
#/bin/mkdir -p ../docs/api
#javadoc -J-ms64m -J-mx64m -version -d ../docs/api $DocPackages
#/bin/cp -r $JDK/docs/api/images ../docs/api/

#
## Add examples
#
/bin/mkdir -p ../examples
/bin/cp -r com/bbn/openmap/examples/crew ../examples/
/bin/mkdir -p ../examples/openmap
/bin/grep -v "package com.bbn.openmap.app;" com/bbn/openmap/app/OpenMap.java > ../examples/openmap/OpenMap.java

#
## Create extra directories and copy config files
#
/bin/mkdir -p ../etc
/bin/mkdir -p ../bin
/bin/mkdir -p ../lib
/bin/cp bin/openmap ../bin
#/bin/cp etc/scripts/OpenMap.bat ../bin
#/bin/cp etc/*.html ../etc/
#/bin/cp etc/overlays.txt ../etc/
#/bin/cp etc/README-install ../
#/bin/cp etc/README-runtime ../
#/bin/cp etc/.omprefs ../etc/ 

#
## Add other jar files
#
if /bin/cp $OpenMapClassPath $BuildDir/lib; then
  echo "++Copied $OpenMapClassPath";
else
  echo "++Copy failed: $OpenMapClassPath";
  exit 1;
fi

if /bin/cp $SwingClassPath $BuildDir/lib; then
  echo "++Copied $SwingClassPath";
else
  echo "++Copy failed: $SwingClassPath";
  exit 1;
fi

if /bin/mv $BuildDir/openmap/lib/openmap.jar $BuildDir/lib; then
  echo "++Copied openmap.jar";
else
  echo "++Copy failed: openmap.jar";
  exit 1;
fi

if /bin/mv $BuildDir/openmap/lib/omcore.jar $BuildDir/lib; then
  echo "++Copied omcore.jar";
else
  echo "++Copy failed: omcore.jar";
  exit 1;
fi

if /bin/cp $GifJarFile $BuildDir/lib; then
  /bin/true
else
  echo "Copy failed: \"$GifJarFile\" could not be copied to \"$BuildDir/lib\"";
  exit 1;
fi

if /bin/cp -r $BuildDir/openmap/doc $BuildDir/doc; then
  /bin/true
else
  echo "Copy failed: \"$BuildDir/openmap/doc\" could not be copied to \"$BuildDir/doc\"";
  exit 1;
fi



# Create packages in tar.Z, tar.gz, and zip format

PkgFiles="$BeanName/doc $BeanName/examples $BeanName/etc $BeanName/lib $BeanName/bin"

cd $BuildDir/..
tar cf $BuildDir/$BeanName.tar $PkgFiles
jar cfM $BuildDir/$BeanName.zip $PkgFiles
cd $BuildDir
gzip -c $BeanName.tar > $BeanName.tar.gz
compress -f $BeanName.tar

echo ""
echo "OpenMap build complete at `date`"
exit 0
