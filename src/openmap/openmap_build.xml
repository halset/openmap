<?xml version="1.0"?>
<project name="OpenMap_Base" default="all" basedir=".">

  <!--  ############################
	Set up the different builds.
	############################ -->  

	<target name="openmap.init" 
	        description="Sets properties needed by the OpenMap code targets.">
		<tstamp/>

		<!-- Currency conditions -->
		<uptodate property="contribBuild.notRequired"
		          targetfile="${openmap.home}/lib/openmap.jar" >
			  <srcfiles dir= "${openmap.src_ext}"
			            excludes="${javac.excludes}, ${dependency.excludes}"
				    includes="**/*.java, **/*.class" />
		</uptodate>

		<uptodate property="openmapBuild.notRequired"
		          targetfile="${openmap.home}/lib/openmap.jar" >
			  <srcfiles dir= "${openmap.src}"
			            excludes="${javac.excludes}, ${dependency.excludes}"
				    includes="**/*.java, **/*.class" />
		</uptodate>

	</target>

	<!--  ############################
	      End of property setup.
	      ############################ -->  

	<!--  ############################
	      Main targets
	      ############################ -->  

	<!-- Call to main build.xml file to call back into this file -->
	<target name="classes">
	  <ant antfile="../../build.xml"
	       target="classes"/>
	</target>

	<!-- Call to main build.xml file to call back into this file -->
	<target name="all">
	  <ant antfile="../../build.xml"
	       target="all"/>
	</target>

	<!-- Targets that should be called from upper level build.xml file,
	     because that init target needs to be called -->

	<target name="all.openmap" 
	        depends="jar.openmap"
		description="Compiles standard OpenMap classes and creates the jar files."/>

	<target name="jar.openmap"
	        depends="build.openmap"
		description="Builds jar files, placing them in the lib directory."
		unless="contribBuild.buildRequired, openmapBuild.buildRequired">

	  <jar jarfile="${openmap.home}/lib/openmap.jar" 
	       basedir="${openmap.classes}"
	       manifest="${openmap.home}/share/manifest.txt" 
	       includes="openmap.properties,
			 **/*.class,
			 **/*.gif, **/*.png,
			 **/*.properties" 
	       excludes="${corba.excludes}"/>

	</target>    
  
	<target name="build.openmap" 
	        depends="openmap" 
                description="Compiles standard OpenMap classes."/>

  <!--  ############################
	ext relies on OpenMap Debug class - but we need to build it first.
	############################ -->  
	<target name="debug" depends="openmap.init">
	     <mkdir dir="${openmap.classes}"/>
	     <javac srcdir="${openmap.src}" 
	            destdir="${openmap.classes}"    
		    debug="on"
	            includes="com/bbn/openmap/util/Debug.java"/>
	</target>

  <!--  ############################
	Build all the packages that OpenMap code depends on, that are
	from other people.
	############################ -->  
	<target name="ext" depends="debug"
		description="Compiles the ext classes that OpenMap needs.">
	       <echo message="Building OpenMap ext classes..."/>
	       <javac srcdir="${openmap.src_ext}"
	              destdir="${openmap.classes}"
		      debug="on"
		      excludes="${javac.excludes}, ${dependency.excludes}"/>
	</target>

  <!--  ############################
	Standard target, to build everything you can.
	############################ -->  
	<target name="openmap" 
	        depends="ext"
		description="Compiles the OpenMap classes.  Ext classes compiled if needed.">
	     <echo message="Building OpenMap classes..."/>
	     <javac srcdir="${openmap.src}" 
	            destdir="${openmap.classes}"
		    debug="on"
		    excludes="${javac.excludes}, ${dependency.excludes}"/>

	     <!-- Copy the gifs and other resources to the new classpath. -->
	     <copy todir="${openmap.classes}" 
	           file="${openmap.home}/openmap.properties"/> 
	     <copy todir="${openmap.classes}/com/bbn/openmap"> 
	          <fileset dir="${openmap.src}/com/bbn/openmap" 
		           includes="**/*.gif, **/*.png, **/*.properties"/>
	     </copy>

	</target>

  <!--  ############################
	Build the documentation.
	############################ -->  
	<target name="docs.openmap" 
	        depends="openmap.init"
		description="Make the javadoc API html documents.">
	     <javadoc sourcepath="${openmap.src}:${openmap.src_ext}"
	              destdir="${openmap.docs}/api"
		      maxmemory="256m"
		      excludepackagenames="**unimplemented**"
		      packagenames="com.bbn.openmap.*, Acme.*, dopplet.*, edu.*"
		      author="true"
		      version="true"
		      use="true"
		      windowtitle="OpenMap API"
		      doctitle="OpenMap"
		      bottom="Copyright (C) BBNT Solutions LLC; See http://openmap.bbn.com/ for details" />
	</target>

  <!--  ############################
	Cleanup targets
	############################ -->  
	<target name="clean_all.openmap"
	        depends="clean.openmap, clean_docs.openmap"
		description="Delete jar files, class files, and generated documentation."/>

	<target name="clean.openmap" 
	        depends="distclean.openmap, clean_jars.openmap"
		description="Delete jar files and all class files"/>

	<target name="distclean.openmap"
	        depends="openmap.init"
		description="Delete class files, but not the jar files.">
	     <delete dir="${openmap.class_dir}" />
	</target>

	<target name="clean_jars.openmap"
	        description="Delete only the jar files from the lib directory.">
	     <delete file="${openmap.home}/lib/openmap.jar"/>
	</target>

	<target name="clean_docs.openmap"
                description="Delete only the generated API documentation.">
	     <delete dir="${openmap.docs}/com"/>
	     <delete>
	          <fileset dir="${openmap.docs}" includes="**/*.html" excludes="doc-index.html"/>
	     </delete>
	     <delete file="${openmap.docs}/stylesheet.css"/>
	     <delete file="${openmap.docs}/package-list"/>
	</target>

  <!--  ############################
	End of cleanup targets.
	############################ -->  
 
</project>

